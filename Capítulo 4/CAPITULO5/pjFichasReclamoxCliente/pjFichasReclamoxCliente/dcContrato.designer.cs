#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace pjFichasReclamoxCliente
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CONTRATO")]
	public partial class dcContratoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertCLIENTE(CLIENTE instance);
    partial void UpdateCLIENTE(CLIENTE instance);
    partial void DeleteCLIENTE(CLIENTE instance);
    partial void InsertFICHARECLAMO(FICHARECLAMO instance);
    partial void UpdateFICHARECLAMO(FICHARECLAMO instance);
    partial void DeleteFICHARECLAMO(FICHARECLAMO instance);
    #endregion
		
		public dcContratoDataContext() : 
				base(global::pjFichasReclamoxCliente.Properties.Settings.Default.CONTRATOConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dcContratoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcContratoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcContratoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcContratoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CLIENTE> CLIENTE
		{
			get
			{
				return this.GetTable<CLIENTE>();
			}
		}
		
		public System.Data.Linq.Table<FICHARECLAMO> FICHARECLAMO
		{
			get
			{
				return this.GetTable<FICHARECLAMO>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CLIENTE")]
	public partial class CLIENTE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDE_CLI;
		
		private string _NOM_CLI;
		
		private string _PAT_CLI;
		
		private string _MAT_CLI;
		
		private string _FON_CLI;
		
		private string _DNI_CLI;
		
		private string _DIR_CLI;
		
		private EntitySet<FICHARECLAMO> _FICHARECLAMO;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDE_CLIChanging(string value);
    partial void OnIDE_CLIChanged();
    partial void OnNOM_CLIChanging(string value);
    partial void OnNOM_CLIChanged();
    partial void OnPAT_CLIChanging(string value);
    partial void OnPAT_CLIChanged();
    partial void OnMAT_CLIChanging(string value);
    partial void OnMAT_CLIChanged();
    partial void OnFON_CLIChanging(string value);
    partial void OnFON_CLIChanged();
    partial void OnDNI_CLIChanging(string value);
    partial void OnDNI_CLIChanged();
    partial void OnDIR_CLIChanging(string value);
    partial void OnDIR_CLIChanged();
    #endregion
		
		public CLIENTE()
		{
			this._FICHARECLAMO = new EntitySet<FICHARECLAMO>(new Action<FICHARECLAMO>(this.attach_FICHARECLAMO), new Action<FICHARECLAMO>(this.detach_FICHARECLAMO));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDE_CLI", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDE_CLI
		{
			get
			{
				return this._IDE_CLI;
			}
			set
			{
				if ((this._IDE_CLI != value))
				{
					this.OnIDE_CLIChanging(value);
					this.SendPropertyChanging();
					this._IDE_CLI = value;
					this.SendPropertyChanged("IDE_CLI");
					this.OnIDE_CLIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOM_CLI", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string NOM_CLI
		{
			get
			{
				return this._NOM_CLI;
			}
			set
			{
				if ((this._NOM_CLI != value))
				{
					this.OnNOM_CLIChanging(value);
					this.SendPropertyChanging();
					this._NOM_CLI = value;
					this.SendPropertyChanged("NOM_CLI");
					this.OnNOM_CLIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAT_CLI", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PAT_CLI
		{
			get
			{
				return this._PAT_CLI;
			}
			set
			{
				if ((this._PAT_CLI != value))
				{
					this.OnPAT_CLIChanging(value);
					this.SendPropertyChanging();
					this._PAT_CLI = value;
					this.SendPropertyChanged("PAT_CLI");
					this.OnPAT_CLIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAT_CLI", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MAT_CLI
		{
			get
			{
				return this._MAT_CLI;
			}
			set
			{
				if ((this._MAT_CLI != value))
				{
					this.OnMAT_CLIChanging(value);
					this.SendPropertyChanging();
					this._MAT_CLI = value;
					this.SendPropertyChanged("MAT_CLI");
					this.OnMAT_CLIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FON_CLI", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string FON_CLI
		{
			get
			{
				return this._FON_CLI;
			}
			set
			{
				if ((this._FON_CLI != value))
				{
					this.OnFON_CLIChanging(value);
					this.SendPropertyChanging();
					this._FON_CLI = value;
					this.SendPropertyChanged("FON_CLI");
					this.OnFON_CLIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNI_CLI", DbType="Char(8) NOT NULL", CanBeNull=false)]
		public string DNI_CLI
		{
			get
			{
				return this._DNI_CLI;
			}
			set
			{
				if ((this._DNI_CLI != value))
				{
					this.OnDNI_CLIChanging(value);
					this.SendPropertyChanging();
					this._DNI_CLI = value;
					this.SendPropertyChanged("DNI_CLI");
					this.OnDNI_CLIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIR_CLI", DbType="VarChar(50)")]
		public string DIR_CLI
		{
			get
			{
				return this._DIR_CLI;
			}
			set
			{
				if ((this._DIR_CLI != value))
				{
					this.OnDIR_CLIChanging(value);
					this.SendPropertyChanging();
					this._DIR_CLI = value;
					this.SendPropertyChanged("DIR_CLI");
					this.OnDIR_CLIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENTE_FICHARECLAMO", Storage="_FICHARECLAMO", ThisKey="IDE_CLI", OtherKey="IDE_CLI")]
		public EntitySet<FICHARECLAMO> FICHARECLAMO
		{
			get
			{
				return this._FICHARECLAMO;
			}
			set
			{
				this._FICHARECLAMO.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FICHARECLAMO(FICHARECLAMO entity)
		{
			this.SendPropertyChanging();
			entity.CLIENTE = this;
		}
		
		private void detach_FICHARECLAMO(FICHARECLAMO entity)
		{
			this.SendPropertyChanging();
			entity.CLIENTE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FICHARECLAMO")]
	public partial class FICHARECLAMO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _COD_FIC;
		
		private string _IDE_CON;
		
		private string _IDE_CLI;
		
		private System.DateTime _FFI_FIC;
		
		private EntityRef<CLIENTE> _CLIENTE;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCOD_FICChanging(string value);
    partial void OnCOD_FICChanged();
    partial void OnIDE_CONChanging(string value);
    partial void OnIDE_CONChanged();
    partial void OnIDE_CLIChanging(string value);
    partial void OnIDE_CLIChanged();
    partial void OnFFI_FICChanging(System.DateTime value);
    partial void OnFFI_FICChanged();
    #endregion
		
		public FICHARECLAMO()
		{
			this._CLIENTE = default(EntityRef<CLIENTE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COD_FIC", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string COD_FIC
		{
			get
			{
				return this._COD_FIC;
			}
			set
			{
				if ((this._COD_FIC != value))
				{
					this.OnCOD_FICChanging(value);
					this.SendPropertyChanging();
					this._COD_FIC = value;
					this.SendPropertyChanged("COD_FIC");
					this.OnCOD_FICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDE_CON", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string IDE_CON
		{
			get
			{
				return this._IDE_CON;
			}
			set
			{
				if ((this._IDE_CON != value))
				{
					this.OnIDE_CONChanging(value);
					this.SendPropertyChanging();
					this._IDE_CON = value;
					this.SendPropertyChanged("IDE_CON");
					this.OnIDE_CONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDE_CLI", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string IDE_CLI
		{
			get
			{
				return this._IDE_CLI;
			}
			set
			{
				if ((this._IDE_CLI != value))
				{
					if (this._CLIENTE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDE_CLIChanging(value);
					this.SendPropertyChanging();
					this._IDE_CLI = value;
					this.SendPropertyChanged("IDE_CLI");
					this.OnIDE_CLIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FFI_FIC", DbType="Date NOT NULL")]
		public System.DateTime FFI_FIC
		{
			get
			{
				return this._FFI_FIC;
			}
			set
			{
				if ((this._FFI_FIC != value))
				{
					this.OnFFI_FICChanging(value);
					this.SendPropertyChanging();
					this._FFI_FIC = value;
					this.SendPropertyChanged("FFI_FIC");
					this.OnFFI_FICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENTE_FICHARECLAMO", Storage="_CLIENTE", ThisKey="IDE_CLI", OtherKey="IDE_CLI", IsForeignKey=true)]
		public CLIENTE CLIENTE
		{
			get
			{
				return this._CLIENTE.Entity;
			}
			set
			{
				CLIENTE previousValue = this._CLIENTE.Entity;
				if (((previousValue != value) 
							|| (this._CLIENTE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLIENTE.Entity = null;
						previousValue.FICHARECLAMO.Remove(this);
					}
					this._CLIENTE.Entity = value;
					if ((value != null))
					{
						value.FICHARECLAMO.Add(this);
						this._IDE_CLI = value.IDE_CLI;
					}
					else
					{
						this._IDE_CLI = default(string);
					}
					this.SendPropertyChanged("CLIENTE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
