#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace pjListadoContratistaLinQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CONTRATO")]
	public partial class dcContratoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertCONTRATISTA(CONTRATISTA instance);
    partial void UpdateCONTRATISTA(CONTRATISTA instance);
    partial void DeleteCONTRATISTA(CONTRATISTA instance);
    #endregion
		
		public dcContratoDataContext() : 
				base(global::pjListadoContratistaLinQ.Properties.Settings.Default.CONTRATOConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dcContratoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcContratoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcContratoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcContratoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CONTRATISTA> CONTRATISTA
		{
			get
			{
				return this.GetTable<CONTRATISTA>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CONTRATISTA")]
	public partial class CONTRATISTA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDE_CON;
		
		private string _NOM_CON;
		
		private string _PAT_CON;
		
		private string _MAT_CON;
		
		private string _FON_CON;
		
		private string _EMA_CON;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDE_CONChanging(string value);
    partial void OnIDE_CONChanged();
    partial void OnNOM_CONChanging(string value);
    partial void OnNOM_CONChanged();
    partial void OnPAT_CONChanging(string value);
    partial void OnPAT_CONChanged();
    partial void OnMAT_CONChanging(string value);
    partial void OnMAT_CONChanged();
    partial void OnFON_CONChanging(string value);
    partial void OnFON_CONChanged();
    partial void OnEMA_CONChanging(string value);
    partial void OnEMA_CONChanged();
    #endregion
		
		public CONTRATISTA()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDE_CON", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDE_CON
		{
			get
			{
				return this._IDE_CON;
			}
			set
			{
				if ((this._IDE_CON != value))
				{
					this.OnIDE_CONChanging(value);
					this.SendPropertyChanging();
					this._IDE_CON = value;
					this.SendPropertyChanged("IDE_CON");
					this.OnIDE_CONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOM_CON", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string NOM_CON
		{
			get
			{
				return this._NOM_CON;
			}
			set
			{
				if ((this._NOM_CON != value))
				{
					this.OnNOM_CONChanging(value);
					this.SendPropertyChanging();
					this._NOM_CON = value;
					this.SendPropertyChanged("NOM_CON");
					this.OnNOM_CONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAT_CON", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PAT_CON
		{
			get
			{
				return this._PAT_CON;
			}
			set
			{
				if ((this._PAT_CON != value))
				{
					this.OnPAT_CONChanging(value);
					this.SendPropertyChanging();
					this._PAT_CON = value;
					this.SendPropertyChanged("PAT_CON");
					this.OnPAT_CONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAT_CON", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string MAT_CON
		{
			get
			{
				return this._MAT_CON;
			}
			set
			{
				if ((this._MAT_CON != value))
				{
					this.OnMAT_CONChanging(value);
					this.SendPropertyChanging();
					this._MAT_CON = value;
					this.SendPropertyChanged("MAT_CON");
					this.OnMAT_CONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FON_CON", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string FON_CON
		{
			get
			{
				return this._FON_CON;
			}
			set
			{
				if ((this._FON_CON != value))
				{
					this.OnFON_CONChanging(value);
					this.SendPropertyChanging();
					this._FON_CON = value;
					this.SendPropertyChanged("FON_CON");
					this.OnFON_CONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMA_CON", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EMA_CON
		{
			get
			{
				return this._EMA_CON;
			}
			set
			{
				if ((this._EMA_CON != value))
				{
					this.OnEMA_CONChanging(value);
					this.SendPropertyChanging();
					this._EMA_CON = value;
					this.SendPropertyChanged("EMA_CON");
					this.OnEMA_CONChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
